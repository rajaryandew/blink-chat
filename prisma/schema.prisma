// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id              String            @id
  name            String
  email           String
  emailVerified   Boolean           @default(false)
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  sessions        Session[]
  accounts        Account[]
  profile         Profile?
  chatParticipant ChatParticipant[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Profile {
  id          String  @id @default(uuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  username    String
  displayName String
  profilePic  String?

  @@map("profile")
}

enum ChatType {
  DIRECT_MESSAGE
  GROUP_CHAT
  @@map("chat_type")
}

model Chat {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  chatType         ChatType          @default(DIRECT_MESSAGE)
  chatName         String?
  chatParticipants ChatParticipant[]
  messages         Message[]
  @@map("chat")
}

model ChatParticipant {
  id       Int       @id @default(autoincrement())
  chatId   String
  chat     Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  @@map("chat_participant")
}

enum SeenStatus{
  SEEN
  SENT
  @@map("seen_status")
}
model Message {
  id                  Int             @id @default(autoincrement())
  chatId              String
  chat                Chat            @relation(fields: [chatId], references: [id])
  senderParticipantId Int
  senderParticipant   ChatParticipant @relation(fields: [senderParticipantId], references: [id])
  sentAt DateTime @default(now())
  seenStatus SeenStatus @default(SENT)
  @@map("message")
}
